map $request_uri $md_uri {
        ~/(.*)/ /_/$1.md;
}

server {
    server_name md.xyz;
    root /var/www/writing;
    default_type 'text/plain';

    location = / {
        return 301 /_home/;
    }

    # Support for images
    rewrite ^/(?!_/)(.*)\.(png|jpg|svg)$ /_/$1.$2 permanent;

    # Enforce slash in the end
    if (!-f $request_filename) {
        rewrite ^(?!/_/)(.*[^/])$ $1/ permanent;
    }

    location / {
        try_files $uri @default;
    }

    location @default {
	add_header Link '<$md_uri>; rel="preload"; as="fetch"';
        add_header Link '</Markdown.Converter.js>; rel="preload"; as="script"';
        add_header Link '</Markdown.Editor.js>; rel="preload"; as="script"';
        add_header Link '</Markdown.Extra.js>; rel="preload"; as="script"';
        add_header Link '</mathjax-editing_writing.js>; rel="preload"; as="script"';
        http2_push_preload on;
        try_files /index.html =404;
    }

    location /_auth/ {
        content_by_lua_block {
            ngx.req.read_body()
            local args, err = ngx.req.get_post_args(2)
            if not args then
                ngx.say("failed to get post args: ", err)
                return
            end
            if not args['name'] or not args['pass'] or args['name']:match("%W") then
                ngx.exit(400)
            end
            local expected_password = io.open("/var/www/writing/_/." .. args['name'] .. "/.password", "r")
            if not expected_password then ngx.exit(403) end
            if args['pass'] ~= expected_password:read("*a") then
                expected_password:close()
                ngx.exit(403)
            end
            expected_password:close()
            local b64 = require("ngx.base64")
            ngx.header['Set-Cookie'] = {
                 'name=' .. args['name'] .. '; path=/',
                'pass=' .. b64.encode_base64url(args['pass']) .. '; path=/'
            }
            ngx.header['Location'] = ngx.var.http_referer or "/"
            ngx.status = 302
            ngx.say('OK')
        }
    }

    location /_/ {
        client_max_body_size 500K;

        access_by_lua_block {
            local uri = ngx.var.uri;
            -- Allow reading public (everything except /.)
            if ngx.req.get_method() == "GET" or ngx.req.get_method() == "HEAD" then
                if uri:find('^/_/[.]') == nil then
                    return
                end
            end

            -- Allow writing public (everything except /., /~, /_)
            if ngx.req.get_method() == "PUT" or ngx.req.get_method() == "POST" then
                if uri:find('^/_/[.~_]') == nil then
                    return
                end
            end

            if not ngx.var.cookie_name or not ngx.var.cookie_pass or ngx.var.cookie_name:match("%W") then
                ngx.exit(403)
            end
            local b64 = require("ngx.base64")
            decoded_password, _err = b64.decode_base64url(ngx.var.cookie_pass)
            if not decoded_password then
                ngx.exit(403)
            end
            local expected_password = io.open("/var/www/writing/_/." .. ngx.var.cookie_name .. "/.password", "r")
            if not expected_password then ngx.exit(403) end
            if decoded_password ~= expected_password:read("*a") then
                expected_password:close()
                ngx.exit(403)
            end
            expected_password:close()

            -- Allow owners to access their folders
            if uri:find('^/_/[.~]' .. ngx.var.cookie_name) ~= nil then
                return
            end

            -- `admin` can access
            -- 1. /_â€¦
            -- 2. /.<username>/.password
            if ngx.var.cookie_name == "admin" then
                if uri:find('^/_/_') ~= nil then
                    return
                end
                if uri:find('^/_/[.]%w+/[.]password') ~= nil then
                    return
                end
            end
            ngx.exit(403)
        }
        if ($request_method = PUT) {
            content_by_lua_block {
                ngx.say('Allowed')
                ngx.exit(200)
            }
        }
        if ($request_method = POST) {
            set_unescape_uri $unescaped $request_uri;
            content_by_lua_block {
                local url = ngx.var.unescaped
                local path = "/var/www/writing/" .. url
                local method = ngx.req.get_method()

                if path:find("\\.\\.") then
                    ngx.status = 400
                    ngx.say("Nope")
                    ngx.exit(400)
                end

                ngx.req.read_body()

                local dirname = path:match(".*/")
                os.execute("mkdir -p '" .. dirname .. "'")

                local data = ngx.req.get_body_data()
                if data == nil then
                    local src = ngx.req.get_body_file()
                    if src == nil then
                        ngx.status = 400
                        ngx.say("No data")
                        ngx.exit(400)
                    end
                    os.rename(src, path)
                    ngx.say("ok")
                    ngx.exit(200)
                end
                local file = io.open(path, "wb")
                if file == nil then
                    ngx.status = 500
                    ngx.say("Unable to open " .. path)
                    ngx.exit(500)
                end
                file:write(data)
                file:close()
                ngx.say("OK")
            }
        }

        autoindex on;
        try_files $uri $uri/ =404;
    }
}
